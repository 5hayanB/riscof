#=========================================
#WARL defination types example
# bitmask:
#             type: dict
#             excludes: [distinct, range]
#             required: True
#             schema:
#                 base:
#                     type: integer
#                     allowed: [0, 1, 2, 3]
#                 mask:
#                     type: integer
#                     allowed: [0, 1, 2, 3]
#         distinct:
#             type: dict
#             excludes: [bitmask, range]
#             required: True
#             schema:
#                 values:
#                     type: list
#                     schema:
#                         type: integer
#                         allowed: [0, 1, 2, 3]
#                 modes:
#                     type: string
#                     allowed: ['unchanged', 'saturate_s', 'saturate_l','next_l', 'next_s']
#         range:
#             type: dict
#             excludes: [bitmask, distinct]
#             required: True
#             schema:
#                 base:
#                     type: integer
#                     allowed: [0, 1, 2, 3]
#                 bound: 
#                     type: integer
#                     allowed: [0, 1, 2, 3]
#                 mode:
#                     type: string
#                     allowed: ['saturate', 'unchanged']

###
# The readonly field specifies that the fields corresponding to that particular field(register) is implemented as read only.
# The implemented field specifies that the corresponding optional feature is implemented in the DUT.

# Information for WARL fields
#     These fields can be implemented as one of the following three types.
#     1.distinct-
#         A set of distinct values which are considered as legal and any other value is considered as illegal.
#         The update modes on illegal value write for this type are as follows-
#             UnChgd,NextUp,NextDown,NearUp,NearDown,Largest,Smallest
#     2.range-
#         The values >= base(Lower) and <= bound(Upper) are considered legal and anything else as illegal.
#         The update modes on illegal value write for this type are as follows-
#             Saturate,UnChgd,Addr
#     3.bitmask-
#         For the bits which are Read only, the corresponding bits are cleared in the base(Base) and the rest of the bits are set.
#         In the value(FixedVal) the values for the Read only bits are given and the rest of the bits are cleared.

###
# **Description**: Takes input a string representing the ISA supported by the implementation. All extension names
# (other than Zext) should be mentioned in upper-case. Z extensions should begin with an upper-case
# 'Z' followed by lower-case extension name (without Camel casing)
#
# **Examples**: 
#
# .. code-block:: none
#
#   ISA: RV32IMA 
#   ISA: RV64IMAFDCZifencei
#
# **Dependencies**: 
#   - Certain extensions are only valid in certain user-spec version. For, eg. Zifencei is available only in user-spec 2.3 and above.
ISA: 
    type: string
    regex: '^RV(32|64|128)([ACDEFGIJLMNPQSTUVX]|Zifencei|Zicsr|Ztso|Zam)*'
    required: True
    check_with: capture_isa_specifics

### 
# **Description**: Version number of User/Non-priveleged ISA specification
#
# **Examples**:
#
# .. code-block:: none
#
#   User_Spec_Version: 2.1
#   User_Spec_Version: 2.3
#
# **Dependencies**:
#   - None 
User_Spec_Version:
    type: float
    min: 2.2 
    default: 2.2
    required: True

### 
# **Description**: Version number of Priveleged ISA specification
#
# **Examples**:
#
# .. code-block:: none
#
#   Privilege_Spec_Version: 1.10
#   Privilege_Spec_Version: 1.11
#
# **Dependencies**:
#   - None 
Privilege_Spec_Version:
    type: float
    min: 1.10
    default: 1.10
    required: True

### 
# **Description**: Describes the fields of the *misa* CSR. A user needs to provide the following
# fields:
#   - implemented: A boolean value indicating if the *misa* has been implemented or not.
#   - MXL: needs to be described as *distinct-warl-func* provinding a list of legal values in int
#       - dintinct:
#           - values: a list of legal values that the MXL field can take
#           - modes : a string describing one of the *distinct-warl-func*
#   - Extensions: is described as a *bitmask-warl-func* indicating the valid extensions.
#       - bitmask
#           - base  : a hexa-decimal value providing the *base* field of the *bitmask-warl-func*
#           - value : a hexa-decimal value providing the *value* field of the *bitmask-warl-func*
# **Examples**:
#
# .. code-block:: none
#
#     misa:
#       - implemented: True
#       - MXL:
#           - distinct:
#               - values : [1, 2]
#               - modes  : 'UnChd'
#       - Extensions:
#           - bitmask:
#               - base:   0x12D
#               - value:  0x000
# **Dependencies**: 
#   - The maximum value specified in MXL should not be greater than the XLEn/32 specified in the ISA
#   field
#   - All extensions defined in the ISA field, cannot be inferred as read-only-0 values. 
#   - All extensions not defined in the ISA field should be inferred as read-only-0 values.
#
misa:
    type: dict
    schema: 
        implemented:
            type: boolean
            default: False
        MXL:
            type: dict
            schema:
                distinct:
                    type: dict
                    schema:
                        values:
                            type: list
                            allowed: [1, 2, 3]
                            default: []
                            check_with: len_check
                        modes:
                            type: list
                            allowed: ["UnChgd","NextUp","NextDown","NearUp","NearDown","Largest","Smallest"]
                            default: ["UnChd"]
                        readonly:
                            type: boolean
                            default: False 
                allow_unknown: False
        Extensions:
            type: dict
            schema:
                bitmask:
                    type: dict
                    schema:
                        base:
                            type: integer
                            min: 0x00
                            max: 0x3FFFFFF
                            default: 0x00
                        value:
                            type: integer
                            min: 0x10
                            max: 0x3FFFFFF
                            default: 0x100
                    check_with: ext_check
                readonly:
                    type: boolean
                    default: False
    default:
        implemented: False
###
# Read only register to store Vendor Id
mvendorid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0
            check_with: max_length
        readonly:
            type: boolean
            default: True
            allowed: [True]
###
# Read only register to store Architecture Id
marchid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0x00
            check_with: max_length
        readonly:
            type: boolean
            default: True
            allowed: [True]
    default:
        implemented: False
        value: 0x00
        readonly: True

###
# Read only register to store Implementation Id
mimpid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0x00
            check_with: max_length
        readonly:
            type: boolean
            default: True
            allowed: [True]
    default:
        implemented: False
        value: 0x00
        readonly: True

###
# Read only register to store Hart Ids
mhartids:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: list
            default: [0]
            check_with: hart_check
        readonly:
            type: boolean
            default: True
            allowed: [True]
    default:
        implemented: False
        value: [0]
        readonly: True
## ================================================================
## Features: MSTATUS fields
mstatus:
    type: dict
    schema:
        MPP:
            type: dict
            schema:
                values:
                    type: list
                    schema:
                        type: integer
                        allowed: [0, 1, 3]
                    check_with: mpp_check
                modes:
                    type: string
                    allowed: ['unchanged', 'saturate_s', 'saturate_l','next_l', 'next_s']
        SXL:
            type: dict
            schema:
                hardwired:
                    type: list
                    allowed: ['No', 'MXL']
                    default: ['No']
                values:
                    type: list
                    allowed: [1, 2, 3]
                    default: [2]
        UXL:
            type: dict
            schema:
                hardwired:
                    type: list
                    allowed: ['No', 'MXL', 'SXL']
                    default: ['No']
                values:
                    type: list
                    allowed: [1, 2, 3]
                    default: [2]
# TODO: TW and XS as per nikhil's def


## ================================================================
## Features: MTVEC WARL functions
#MTVEC_BASE:
#    type: dict
#    schema:
#      readonly:
#        type: integer
#        excludes: [range , distinct]
#        required: True
#      range:
#          type: list
#          schema:
#              type: dict
#              valueschema:
#                type: integer
#          excludes: [readonly, distinct]
#          required: True
#      distinct:
#          type: list
#          valueschema:
#              type: integer
#          excludes: [readonly, range]
#          required: True
#    default:
#        range:
#          - base: 0x0
#            bound: 0xFFFFFFFF
#
## ================================================================
## Features: MIDELEG and MEDELEG WARL functions

# This field will specify which of the interrupts in the machine mode
# can delegated to a lower level privilege. A 0-bit indicates that
# particular interrupt cannot be delegated.
MIDELEG:
    type: integer
    max: 0xFFF
    default: 0xFFF


# This field will specify which of the exceptions in the machine mode
# can delegated to a lower level privilege. A 0-bit indicates that
# particular exception cannot be delegated.
MEDELEG:
    type: integer
    default: 0x7FF

## ================================================================
## Features: MIP and MIE WARL functions

# This field will describe all valid bits of MIP register which can be 
# interpreted as Interrupts by the system in Machine Mode.
MIP:
  type: integer
  default: 0xFFF
  max: 0xFFF

# This field will describe all valid bits of MIE register which can be 
# used to enable or disable Interrupts in Machine Mode.
MIE:
  type: integer
  max: 0xFFF


# # Platform environment
# # Name of the Target
# USER_TARGET:
#     type: string
#     required: True
# # Directory containing the platform specific headers
# USER_ENV_DIR:
#     type: string
#     required: True
# # Linker script to be used during compilation of test
# USER_LINKER:
#     type: string
#     required: True
# # User defined ABI to be used during compilation
# USER_ABI:
#     type: string
#     required: True
# USER_EXECUTABLE:
#     type: string
#     required: True

# # Execution Enviornment
# RISCV-PREFIX:
#     type: string
#     default: riscv64-unknown-elf-
#     required: True
# USER_SIGN:
#     type: string
#     required: True
# USER_POST_SIM:
#     type: string
#     default: ''
#     required: False
