
#=========================================
#WARL defination types example
# bitmask:
#             type: dict
#             excludes: [distinct, range]
#             required: True
#             schema:
#                 base:
#                     type: integer
#                     allowed: [0, 1, 2, 3]
#                 mask:
#                     type: integer
#                     allowed: [0, 1, 2, 3]
#         distinct:
#             type: dict
#             excludes: [bitmask, range]
#             required: True
#             schema:
#                 values:
#                     type: list
#                     schema:
#                         type: integer
#                         allowed: [0, 1, 2, 3]
#                 modes:
#                     type: string
#                     allowed: ['unchanged', 'saturate_s', 'saturate_l','next_l', 'next_s']
#         range:
#             type: dict
#             excludes: [bitmask, distinct]
#             required: True
#             schema:
#                 base:
#                     type: integer
#                     allowed: [0, 1, 2, 3]
#                 bound: 
#                     type: integer
#                     allowed: [0, 1, 2, 3]
#                 mode:
#                     type: string
#                     allowed: ['saturate', 'unchanged']

# ISA Supported
ISA: 
    type: string
    regex: '^RV(32|64|128)([ACDEFGIJLMNPQSTUVX]|Zifencei|Zicsr|Ztso|Zam)*'
    required: True
    check_with: capture_isa_specifics

# Version number of User Level ISA specification
User_Spec_Version:
    type: float
    min: 2.2 
    default: 2.2
    required: True

# Version number of Privileged Architecture specification
Privilege_Spec_Version:
    type: float
    min: 1.10
    default: 1.10
    required: True

#MISA register MXL implemented as a distinct type and Extensions as a bitmask
misa:
    type: dict
    schema: 
        implemented:
            type: boolean
            default: False
        MXL:
            type: dict
            schema:
                values:
                    type: list
                    allowed: [1, 2, 3]
                    default: []
                    check_with: len_check
                readonly:
                    type: boolean
                    default: False 
        Extensions:
            type: dict
            schema:
                base:
                    type: integer
                    min: 0x00
                    max: 0x3FFFFFF
                    default: 0x00
                value:
                    type: integer
                    min: 0x10
                    max: 0x3FFFFFF
                    default: 0x100
                readonly:
                    type: boolean
                    default: False
            check_with: ext_check

# ================================================================
# Values of read-only Machine-level CSRs mvendorid, marchid, mimpid, hartids

mvendorid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0
            check_with: max_length
        readonly:
            type: boolean
            default: True
            allowed: [True]

marchid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0x00
            check_with: max_length
        readonly:
            type: boolean
            default: True
            allowed: [True]
    default:
        implemented: False
        value: 0x00
        readonly: True

mimpid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0x00
            check_with: max_length
        readonly:
            type: boolean
            default: True
            allowed: [True]
    default:
        implemented: False
        value: 0x00
        readonly: True

mhartids:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: list
            default: [0]
            check_with: hart_check
        readonly:
            type: boolean
            default: True
            allowed: [True]
    default:
        implemented: False
        value: [0]
        readonly: True
## ================================================================
## Features: MSTATUS fields
MSTATUS:
    type: dict
    schema:
        MPP:
            type: dict
            schema:
                values:
                    type: list
                    schema:
                        type: integer
                        allowed: [0, 1, 3]
                modes:
                    type: string
                    allowed: ['unchanged', 'saturate_s', 'saturate_l','next_l', 'next_s']
        SXL:
            type: dict
            schema:
                hardwired:
                    type: list
                    allowed: ['No', 'MXL']
                    default: ['No']
                values:
                    type: list
                    allowed: [1, 2, 3]
                    default: [2]
        UXL:
            type: dict
            schema:
                hardwired:
                    type: list
                    allowed: ['No', 'MXL', 'SXL']
                    default: ['No']
                values:
                    type: list
                    allowed: [1, 2, 3]
                    default: [2]
# TODO: TW and XS as per nikhil's def


## ================================================================
## Features: MTVEC WARL functions
#MTVEC_BASE:
#    type: dict
#    schema:
#      readonly:
#        type: integer
#        excludes: [range , distinct]
#        required: True
#      range:
#          type: list
#          schema:
#              type: dict
#              valueschema:
#                type: integer
#          excludes: [readonly, distinct]
#          required: True
#      distinct:
#          type: list
#          valueschema:
#              type: integer
#          excludes: [readonly, range]
#          required: True
#    default:
#        range:
#          - base: 0x0
#            bound: 0xFFFFFFFF
#
## ================================================================
## Features: MIDELEG and MEDELEG WARL functions

# This field will specify which of the interrupts in the machine mode
# can delegated to a lower level privilege. A 0-bit indicates that
# particular interrupt cannot be delegated.
MIDELEG:
    type: integer
    max: 0xFFF
    default: 0xFFF


# This field will specify which of the exceptions in the machine mode
# can delegated to a lower level privilege. A 0-bit indicates that
# particular exception cannot be delegated.
MEDELEG:
    type: integer
    default: 0x7FF

## ================================================================
## Features: MIP and MIE WARL functions

# This field will describe all valid bits of MIP register which can be 
# interpreted as Interrupts by the system in Machine Mode.
MIP:
  type: integer
  default: 0xFFF
  max: 0xFFF

# This field will describe all valid bits of MIE register which can be 
# used to enable or disable Interrupts in Machine Mode.
MIE:
  type: integer
  max: 0xFFF


# # Platform environment
# # Name of the Target
# USER_TARGET:
#     type: string
#     required: True
# # Directory containing the platform specific headers
# USER_ENV_DIR:
#     type: string
#     required: True
# # Linker script to be used during compilation of test
# USER_LINKER:
#     type: string
#     required: True
# # User defined ABI to be used during compilation
# USER_ABI:
#     type: string
#     required: True
# USER_EXECUTABLE:
#     type: string
#     required: True

# # Execution Enviornment
# RISCV-PREFIX:
#     type: string
#     default: riscv64-unknown-elf-
#     required: True
# USER_SIGN:
#     type: string
#     required: True
# USER_POST_SIM:
#     type: string
#     default: ''
#     required: False