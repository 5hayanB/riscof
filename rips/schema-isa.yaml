
###
# **Description**: Takes input a string representing the ISA supported by the implementation. All extension names
# (other than Zext) should be mentioned in upper-case. Z extensions should begin with an upper-case
# 'Z' followed by lower-case extension name (without Camel casing)
#
# **Examples**: 
#
# .. code-block:: none
#
#   ISA: RV32IMA 
#   ISA: RV64IMAFDCZifencei
#
# **Constraints**: 
#   - Certain extensions are only valid in certain user-spec version. For, eg. Zifencei is available only in user-spec 2.3 and above.
ISA: 
    type: string
    regex: '^RV(32|64|128)([ACDEFGIJLMNPQSTUVX]|Zifencei|Zicsr|Ztso|Zam)*'
    required: True
    check_with: capture_isa_specifics

### 
# **Description**: Version number of User/Non-priveleged ISA specification
#
# **Examples**:
#
# .. code-block:: none
#
#   User_Spec_Version: 2.1
#   User_Spec_Version: 2.3
#
# **Constraints**:
#   - should be greater than or equal to 2.2
User_Spec_Version:
    type: float
    min: 2.2 
    default: 2.2
    required: True

### 
# **Description**: Version number of Priveleged ISA specification
#
# **Examples**:
#
# .. code-block:: none
#
#   Privilege_Spec_Version: 1.10
#   Privilege_Spec_Version: 1.11
#
# **Constraints**:
#   - should be greater than or equal to 1.10 
Privilege_Spec_Version:
    type: float
    min: 1.10
    default: 1.10
    required: True

### 
# **Description**: Describes the fields of the *misa* CSR. A user needs to provide the following
# fields:
#   - implemented: A boolean value indicating if the *misa* has been implemented or not.
#   - MXL: needs to be described as *distinct-warl-func* providing a list of 2 bit legal values in int
#       - distinct:
#           - values: a list of legal values that the MXL field can take.(Allowed [1,2,3])
#           - mode : a string describing one of the *distinct-update-warl-func*.
# 
#   - Extensions: is described as a *bitmask-warl-func* indicating the valid extensions.
#       - bitmask:
#           - base  : a 26 bit wide value in hexa-decimal providing the *base* field of the *bitmask-warl-func*.
#           - value : a 26 bit wide value in hexa-decimal providing the *value* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
#
#     misa:
#      implemented: True
#      MXL:
#          distinct:
#              values : [1, 2]
#              mode  : 'UnChgd'
#      Extensions:
#          bitmask:
#              base:   0x12D
#              value:  0x000
# 
# **Constraints**: 
#   - The maximum value specified in MXL should not be greater than the XLEN/32 specified in the ISA field.
#   - All extensions defined in the ISA field, cannot be inferred as read-only-0 values. 
#   - All extensions not defined in the ISA field should be inferred as read-only-0 values.
#   - The value and base fields of Extensions should be only 26-bits wide.
# 
#
misa:
    type: dict
    schema: 
        implemented:
            type: boolean
            default: False
        MXL:
            type: dict
            schema:
                distinct:
                    type: dict
                    schema:
                        values:
                            type: list
                            allowed: [1, 2, 3]
                            default: []
                            check_with: len_check
                        mode:
                            type: string
                            allowed: ["UnChgd","NextUp","NextDown","NearUp","NearDown","Largest","Smallest"]
                            default: "UnChgd"
            allowed: ['distinct']
        Extensions:
            type: dict
            schema:
                bitmask:
                    type: dict
                    schema:
                        base:
                            type: integer
                            min: 0x00
                            max: 0x3FFFFFF
                            default: 0x00
                        value:
                            type: integer
                            min: 0x00
                            max: 0x3FFFFFF
                            default: 0x100
                    check_with: ext_check
            allowed: ['bitmask']
    default:
        implemented: False
### 
# **Description**: Stores the VendorId.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - value: A XLEN bit wide value in hexa-decimal equal to the VendorId
# 
# **Examples**: 
# 
# .. code-block:: none
#
#   mvendorid:
#      implemented: True
#      value: 0x458
#
# **Constraints**: 
#       - This field should be only XLEN bits wide 
mvendorid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0
            check_with: max_length
    default:
        implemented: False
### 
# **Description**: Stores the ArchitectureId.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - value: A XLEN bit wide value in hexa-decimal equal to the ArchitectureId
#       - readonly: A boolean field indicating whether the register is read only.( This register is read
#                   only always as mandated by the specifications.)
# 
# **Examples**:
#
# .. code-block:: python
#
#   marchid:
#      implemented: True
#      value: 0x458
#
# **Constraints**: 
#       - This field should be only XLEN bits wide 
marchid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0x00
            check_with: max_length
    default:
        implemented: False

### 
# **Description**: Stores the ImplementationId.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - value: A hexa-decimal value equal to the ImplementationId
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mimpid:
#      implemented: True
#      value: 0x458
# **Constraints**: 
#       - This field should be only XLEN bits wide 
mimpid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        value:
            type: integer
            default: 0x00
            check_with: max_length
    default:
        implemented: False

### 
# **Description**: Specifies the Hart Ids in multi-core systems.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - value: a list of integer values equal to the Hart Ids.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mhartids:
#      implemented: True
#      value: [0,125,458]
# **Constraints**: 
#       - Atleast one id must be equal to zero.
#       - The values field should be only XLEN bits wide.
mhartids:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        values:
            type: list
            default: [0]
            check_with: hart_check
    default:
        implemented: False

### 
# **Description**: Specifies the fields of the *mstatus* register.
#       - SD: 
#           - is_hardwired:  A boolean value indicating if platform has hardwired this field to 0.
#       - XS:
#           - is_hardwired:  A boolean value indicating if platform has hardwired this field to 0.
#       - FS: 
#           - distinct: (distinct-warl-func)
#               - values: A list of legal values that the FS field can take.
#               - mode : A string describing one of the *distinct-update-warl-func*.
#       - MPP: 
#           - distinct: (distinct-warl-func)
#               - values: A list of legal values that the MPP field can take.
#               - mode : A string describing one of the *distinct-update-warl-func*.
#       - SXL: This field doesnt exist in systems where XLEN = 32
#           - is_hardwired : A boolean value indicating if platform has hardwired this field to some other field.
#           - hardwired_field: A string field indicating to which field SXL is hardwired. (Allowed MXL)
#           - values: A list of legal values that SXL can take when not hardwired to MXL. Allowed values are [1, 2, 3]
#       - UXL: This field doesnt exist in systems where XLEN = 32
#           - is_hardwired : A boolean value indicating if platform has hardwired this field to some other field.
#           - hardwired_field: A string field indicating to which field UXL is hardwired. (Allowed [MXL,SXL])
#           - values: A list of legal values that SXL can take when not hardwired to MXL. Allowed values are [1, 2, 3]
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mstatus:
#      SD:
#          is_hardwired: False
#      XS:
#          is_hardwired: False
#      FS:
#          distinct:
#              values: [0,1,2,3]
#              mode: "UnChgd"
#      MPP:
#           distinct:
#              values: [0,3]
#              mode: "UnChgd"
#      SXL:
#           is_hardwired: False
#           hardwired_field: "MXL"
#      UXL:
#           is_hardwired: False
#           hardwired_field: "MXL"
# **Constraints**:
#       - if XS is hardwired to 0 and FS is hardwired to 0, then SD should also be hardwired to 0
#       - if FS field is_hardwired is True, then the distinct field is ignored by the tests.
#       - No mode corresponding to a value in MPP must be unsupported (i.e. 1 cannot be present without the 'S' extension and '0' without the 'U' extension)
#       - No value in SXL or UXL must exceed XLEN/32.
mstatus:
    type: dict
    schema:
        XS:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                    default: 0
                    dependencies: ['is_hardwired']
                    readonly: True
                is_hardwired:
                    type: boolean
                    default: False
            default:
                is_hardwired: False
        FS:
            type: dict
            schema:
                distinct:
                    type: dict
                    schema:
                        values:
                            type: list
                            allowed: [0,1,2,3]
                        mode:
                            type: string
                            allowed: ["UnChgd","NextUp","NextDown","NearUp","NearDown","Largest","Smallest"]
                            default: "UnChgd"
        MPP:
            type: dict
            schema:
                distinct:
                    type: dict
                    schema:
                        values:
                            type: list
                            allowed: [0, 1, 3]
                            check_with: mpp_check
                        mode:
                            type: string
                            allowed: ["UnChgd","NextUp","NextDown","NearUp","NearDown","Largest","Smallest"]
                            default: "UnChgd"
        SXL:
            type: dict
            schema:
                is_hardwired: 
                    type: boolean
                    default: False
                hardwired_field:
                    type: string
                    dependencies: ['is_hardwired']
                    allowed: ["MXL"]
                    default: "MXL"
                values:
                    type: list
                    allowed: [1, 2, 3]
                    check_with: len_check
                implemented:
                    type: boolean
                    readonly: True
                    # default_setter: lamda doc: sset()
            default:
                is_hardwired: True
                hardwired_field: "MXL"
        UXL:
            type: dict
            schema:
                is_hardwired: 
                    type: boolean
                    default: False
                hardwired_field:
                    type: string
                    dependencies: ['is_hardwired']
                    default: "MXL"
                    allowed: ["MXL","SXL"]
                values:
                    type: list
                    allowed: [1, 2, 3]
                    check_with: len_check
                implemented:
                    type: boolean
                    readonly: True
                    # default_setter: lamda doc: sset()
            default:
                is_hardwired: True
                hardwired_field: "MXL"
        SD:
            type: dict
            schema:
                is_hardwired:
                    type: boolean
                    default: True
                hardwired_val:
                    readonly: True
                    default: 0
                    type: integer
            default:
                is_hardwired: False
        TSR:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        TW:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        TVM:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        MXR:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        SUM:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        SPP:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        MPRV:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        # MPIE:
        #     type: dict
        #     schema:
        #         hardwired_val:
        #             type: integer
        #         is_hardwired:
        #             type: boolean
        #     readonly: True
        #     default:
        #         is_hardwired: False
        SPIE:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        UPIE:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        # MIE:
        #     type: dict
        #     schema:
        #         hardwired_val:
        #             type: integer
        #         is_hardwired:
        #             type: boolean
        #     readonly: True
        #     default:
        #         is_hardwired: False
        SIE:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        UIE:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True

### 
# **Description**: Specifies the fields of the *mtvec* register.
#       - BASE: needs to be described as *distinct-warl-func* provinding a list of legal values in int or as a *range-warl-func* providing two integers specifying the range of legal values.       
#           - range:
#               - base: An integer indicating the lowest legal value.
#               - bound: An integer indicating the highest legal value.
#               - mode: A string describing one of the *range-update-warl-func*
#           - distinct:
#               - values: A list of legal values that the BASE field can take.
#               - mode : A string describing one of the *distinct-update-warl-func*.
#       - MODE: needs to be described as *distinct-warl-func* providing a list of legal values in int
#           - distinct:
#               - values: A list of legal values that the MODE field can take.(Allowed [0,1])
#               - mode : A string describing one of the *distinct-update-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mtvec:
#      BASE:
#          distinct:
#              values: [1000]
#              mode: 'UnChgd'
#      MODE:
#           distinct:
#              values: [0,1]
#              mode: "UnChgd"
# **Constraints**: 
#       - The maximum in the list of values specified for MODE cannot exceed 1.
#       - No value in the list of legal values(in case of distinct func) or the base and bound(in case of range func)
#         can exceed 2^(XLEN-1)-4 and the base must be lower than bound.
mtvec:
    type: dict
    schema:
        BASE:
            type: dict
            schema:
                range:
                    type: dict
                    excludes: ['distinct']
                    schema: 
                        base:
                            type: integer
                        bound:
                            type: integer
                        mode:
                            type: string
                            allowed: ['Saturate','UnChgd','Addr']
                            default: 'UnChgd'
                    check_with: mtveccheck
                distinct:
                    type: dict
                    excludes: ['range']
                    schema:
                        values:
                            type: list
                            check_with: mtvecdist
                        mode:
                            type: string
                            allowed: ["UnChgd","NextUp","NextDown","NearUp","NearDown","Largest","Smallest"]
                            default: "UnChgd"
        MODE:
            type: dict
            schema:
                distinct:
                    type: dict
                    schema:
                        values:
                            type: list
                            allowed: [0,1]
                        mode:
                            type: string
                            allowed: ["UnChgd","NextUp","NextDown","NearUp","NearDown","Largest","Smallest"]
                            default: "UnChgd"
    default:
        BASE:
            range:
                base: 0x00
                bound: 0xFFFFFFFC
        MODE:
            distinct:
                values: [0]

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating delegatable interrupts
#       - bitmask:
#           - base  : a XLEN bit wide value in hexa-decimal providing the *base* field of the *bitmask-warl-func*.
#           - value : a XLEN bit wide value in hexa-decimal value providing the *value* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mideleg:
#      bitmask:
#          base: 0xFFFFFFFF
#          value: 0x00
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the base cannot be 1 in the value.
#       - The base and value cannot exceed the maximum value supported by the ISA.
mideleg:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    check_with: max_length
                value:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean
            readonly: True    
    check_with: hardwirecheck
    default:
        bitmask:
            base: 0xFFFFFFFF
            value: 0x00
### 
# **Description**: needs to be described as *bitmask-warl-func* indicating delegatable exceptions
#       - bitmask:
#           - base  : a hexa-decimal value providing the *base* field of the *bitmask-warl-func*.
#           - value : a hexa-decimal value providing the *value* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   medeleg:
#      bitmask:
#          base: 0xFFFFF7FF
#          value: 0x00
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the base cannot be 1 in the value.
#       - The base and value cannot exceed the maximum value supported by the ISA.
#       - The 11th bit needs to be hardwired to 0 ie. 0 in position 11 in both base and value.
medeleg:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    check_with: max_length
                value:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean 
            readonly: True  
    check_with: medelegcheck
    default:
        bitmask:
            base: 0xFFFFF7FF
            value: 0x00                    

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating allowed interrupts.
#       - bitmask:
#           - base  : a XLEN bit wide value in hexa-decimal providing the *base* field of the *bitmask-warl-func*.
#           - value : a XLEN bit wide value in hexa-decimal providing the *value* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mip:
#      bitmask:
#          base: 0xFFFFFFFF
#          value: 0x00
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the base cannot be 1 in the value.
#       - The base and value cannot exceed the maximum value supported by the ISA.
mip:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0xFFFFFFFF
                    check_with: max_length
                value:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean
            default: True
            readonly: True
    check_with: hardwirecheck
    default:
        bitmask:
            base: 0xFFFFFFFF

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating allowed interrupts.
#       - bitmask:
#           - base  : a XLEN bit wide value in hexa-decimal providing the *base* field of the *bitmask-warl-func*.
#           - value : a XLEN bit wide value in hexa-decimal providing the *value* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mie:
#      bitmask:
#          base: 0xFFFFFFFF
#          value: 0x00
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the base cannot be 1 in the value.
#       - The base and value cannot exceed the maximum value supported by the ISA.
mie:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0xFFFFFFFF
                    check_with: max_length
                value:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean
            default: True
            readonly: True
    check_with: hardwirecheck
    default:
        bitmask:
            base: 0xFFFFFFFF

### 
# **Description**: needs to be described as *bitmask-warl-func* or a *range-warl-func* indicating the range of 
#                  legal values allowed
#       - bitmask:
#           - base  : a XLEN bit wide value in hexa-decimal providing the *base* field of the *bitmask-warl-func*.
#           - value : a XLEN bit wide value in hexa-decimal providing the *value* field of the *bitmask-warl-func*.
#       - range:
#           - base: An integer indicating the lowest legal value.
#           - bound: An integer indicating the highest legal value.
#           - mode: A string describing one of the *range-update-warl-func*
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mepc:
#      range:
#          bound: 0xFFFFFFFF
#          base: 0x00
# **Constraints**: 
#       - The base and value cannot exceed the maximum value supported by the ISA (in case of *bitmask-warl-func*).
#       - The base and bound cannot exceed the maximum value supported by the ISA (in case of *range-warl-func*) 
#         and the base should be lower than the bound.
mepc:
    type: dict
    schema:
        bitmask:
            type: dict
            excludes: ['range']
            schema:
                base:
                    type: integer
                    default: 0x00
                    check_with: max_length
                value:
                    type: integer
                    default: 0x000
                    check_with: max_length
        range:
            type: dict
            excludes: ['bitmask']
            schema:
                base:
                    type: integer
                bound:
                    type: integer
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
            check_with: rangecheck
    default:
        range:
            base: 0x00
            bound: 0xFFFFFFFF
            mode: "UnChgd"


### 
# **Description**: needs to be described as *bitmask-warl-func* indicating supported counters.
#       - bitmask:
#           - base  : a XLEN bit wide value in hexa-decimal providing the *base* field of the *bitmask-warl-func*.
#           - value : a XLEN bit wide value in hexa-decimal providing the *value* field of the *bitmask-warl-func*.
#       - readonly: a boolean value indicating whether the register is read only.
#       - hardwired: a string indicating whether the register is hardwired to 0 or not.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mcountinhibit:
#      bitmask:
#          base: 0xFFFFFFFF
#          value: 0x00
# **Constraints**: 
#       - The base and value cannot exceed the maximum value supported by the ISA.
mcountinhibit:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                value:
                    type: integer
                    default: 0x00
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        bitmask:
            base: 0x00
            value: 0x00

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating supported counters.
#       - bitmask:
#           - base  : XLEN bit wide value in hexa-decimal providing the *base* field of the *bitmask-warl-func*.
#           - value : XLEN bit wide value in hexa-decimal providing the *value* field of the *bitmask-warl-func*.
#       - readonly: a boolean value indicating whether the register is read only.
#       - hardwired: a string indicating whether the register is hardwired to 0 or not.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mcounteren:
#      bitmask:
#          base: 0xFFFFFFFF
#          value: 0x00
# **Constraints**: 
#       - The base and value cannot exceed the maximum value supported by the ISA.
mcounteren:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                value:
                    type: integer
                    default: 0x00
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: True
        hardwired_val: 0

### 
# **Description**: needs to be described as *range-warl-func* indicating allowed range for the register.
#       - is_hardwired: a string indicating whether the register is hardwired or not.
#  The other counters(from 4 till 31 can be defined in the same way as shown below.)
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mhpmcounter3:
#       is_hardwired: True
#       hardwired_val: 0
# **Constraints**: 
#       - The base and value cannot exceed value (2^63)-1.
mhpmcounter3:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter4:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter5:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter6:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter7:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter8:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter9:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter10:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter11:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter12:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter13:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter14:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter15:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter16:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter17:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter18:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter19:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter20:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter21:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter22:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter23:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter24:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter25:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter26:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter27:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter28:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter29:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter30:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0

mhpmcounter31:
    type: dict
    schema:
        range:
            type: dict
            schema:
                base:
                    type: integer
                    default: 0x00
                    readonly: True
                bound:
                    type: integer
                    default: 0xFFFFFFFFFFFFFFFF
                    readonly: True
                mode:
                    type: string
                    allowed: ['Saturate','UnChgd','Addr']
                    default: 'UnChgd'
                    readonly: True
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: False
        hardwired_val: 0



# # Platform environment
# # Name of the Target
# USER_TARGET:
#     type: string
#     required: True
# # Directory containing the platform specific headers
# USER_ENV_DIR:
#     type: string
#     required: True
# # Linker script to be used during compilation of test
# USER_LINKER:
#     type: string
#     required: True
# # User defined ABI to be used during compilation
# USER_ABI:
#     type: string
#     required: True
# USER_EXECUTABLE:
#     type: string
#     required: True

# # Execution Enviornment
# RISCV-PREFIX:
#     type: string
#     default: riscv64-unknown-elf-
#     required: True
# USER_SIGN:
#     type: string
#     required: True
# USER_POST_SIM:
#     type: string
#     default: ''
#     required: False
