
Welcome to RISCOF 
=================


**RISCOF** (RISC-V Compliance Framework) is a YAML based framework which can be used to prove compliance of a RISC-V implementation against the RISC-V privileged and unprivileged ISA spec. 

**Caution**: This is still a work in progress and non-backward compatible changes are expected to happen. 

For more information on the official RISC-V compliance and test suite please visit: `Github <https://github.com/riscv/riscv-compliance>`_

RISCOF [`Repository <https://gitlab.com/incoresemi/riscof>`_]


Overview
-------------------

The following diagram captures the over-flow of RISCOF.

.. image:: riscof-flow.png
    :width: 800px
    :align: center
    :height: 500px
    :alt: riscof-flow

The user is required to provide 3 YAML files as input to the flow:

1. **ISA Spec**: This YAML file is meant to capture the ISA related features implemented by the user. Details of this input file can be found here : :ref:`isa_yaml_spec`. 
2. **Platform Spec**: This YAML file is meant to capture the platform specific features implemented by the user. Details of this input file can be found here : :ref:`platform_yaml_spec`.
3. **Env Spec**: This YAML file is meant to capture the options and spec of how the user provided implementation is to be executed/run and how the signature should be extracted for each test. This spec is used to create a python-based plugin for executing the implementation. By using the plugin feature, one can use the same plugin for implementations varying in ISA and Platform spec. Details: *[WIP]*

Working:
^^^^^^^^^
The ISA and Platform spec are first checked by the validator for any inconsistencies. Checks like 'F' to exist for 'D' are performed by the validator. The validator will exit with an error indicating any inconsistencies in both the specs. Once the validator checks pass, two separate standard yaml files are generated, one for each input type. These standard yaml files contains all fields elaborated and additional info for each node. While the user need not specify all the fields in the input yaml files, the validator will assign defaults to those fields and generate a standard exhaustive yaml for both ISA and Platform spec.

From the standard YAMLs generated by the validator and the test-pool, the 'Test Selector' identifies the list of all tests that need to run on the given implementation for compliance.

The Env spec from the user is passed into a plugin-generator to generate a python-plugin which contains information on how the to execute tests on the user implementation and how to extract the signature. Once this plugin is generated for an implementation, it can directly be used into the framework without having to provide the Env-Spec. The same procedure is followed to produce a plugin for the golden-model as well. Please note, the Env Spec does not under-go any validation and it is thus the onus of the user to ensure that the plug-in has been correctly generated for execution.

The list of tests, implmentation-plugin and golden-plugin are all fed into the python-framework, which iterates over executing tests on the both the plugins and comparing signatures. The result of the tests if provided at the end as a report indicating which tests passed and which failed.


.. toctree::
   :hidden:
   :glob:
   
   quickstart
   yaml-specs
   code-doc

Indices and tables
------------------

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

